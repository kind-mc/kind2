

node cruise_controller(onOff: bool; 
      decelSet: bool; 
      accelResume: bool; 
      cancel: bool; 
      brakePedal: bool; 
      carGear: int ; 
      carSpeed: real; 
      validInputs: bool)
   returns (mode: int ; 
      cruiseThrottle: real; 
      desiredSpeed: real; 
      VRP1: bool; 
      VRP2: bool; 
      CP8a: bool; 
      VRP3: bool; 
      VRP4: bool; 
      SP4: bool; 
      SP5: bool; 
      SP6: bool; 
      SP7: bool; 
      SP3b: bool; 
      SP3c: bool; 
      SP3: bool; 
      SP3a: bool; 
      SP2: bool; 
      SP1: bool; 
      SP8: bool; 
      SP9: bool; 
      SP10: bool; 
      SP11: bool);

var
   rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_clock: bool; 
   rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_init_step: bool; 
   newDesiredSpeed1: real; 
   rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_clock: bool; 
   rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_init_step: bool; 
   newDesiredSpeed: real; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root21: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode21: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root1: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root11: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode11: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root1: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_states___root: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_outports_mode: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed2: bool; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_states___root: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_outports_mode: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed1: bool; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode3: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed3: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_outports_setDesiredSpeed: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_outports_setDesiredSpeed: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_1: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_states___root: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_outports_setDesiredSpeed: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_mode: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_2: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_states___root: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_outports_setDesiredSpeed: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_states___root: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_outports_mode: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_3: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_3: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_8_states___root: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_states___root: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_outports_mode: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_4: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_4: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_10_states___root: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_states___root: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_mode: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_setDesiredSpeed: bool; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode2: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_02: bool; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_02: bool; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root2: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode2: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root1: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode1: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_01: bool; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_01: bool; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode1: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root1: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0: bool; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_0: bool; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root2: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_states___root: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_outports_mode: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root2: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root2: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root4: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed4: bool; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root1: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root1: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed1: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_outports_setDesiredSpeed: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_outports_mode: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_1: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_4_outports_setDesiredSpeed: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_mode: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_2: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_2: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_states___root: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_outports_mode: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_3: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_9_outports_setDesiredSpeed: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_outports_mode: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_states___root: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_mode: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_setDesiredSpeed: bool; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_states___root: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_outports_mode: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0: bool; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_rltCheckEntryStateConsistency_0: bool; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_outports_mode: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_Off_rlt_state_2_states___root: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_states___root: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_outports_mode: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed: bool; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed: bool; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root: int ; 
   rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_setDesiredSpeed: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_outports_setDesiredSpeed: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_1: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_complete_1: bool; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_outports_mode: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_states___root: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_mode: int ; 
   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_setDesiredSpeed: bool; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_rltCheckEntryStateConsistency_0: bool; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root: int ; 
   rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode: int ; 
   chart_CruiseController_ModeLogic_mode_logic_rlt_evtInitStep: bool; 
   chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root: int ; 
   chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_mode: int ; 
   chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed: bool; 
   chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_current_event: int ; 
   chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root: int ; 
   chart_CruiseController_ModeLogic_mode_logic_final_state_states___root: int ; 
   chart_CruiseController_ModeLogic_mode_logic_setDesiredSpeed: bool; 
   cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1: bool; 
   cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator2: bool; 
   cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator3: bool; 
   cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Limit_Enforce_lower_limit: int ; 
   cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Add: int ; 
   cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Switch: int ; 
   cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Unit_Delay: int ; 
   cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Out: int ; 
   cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Out: bool; 
   cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Limit_Enforce_lower_limit: int ; 
   cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Add: int ; 
   cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Switch: int ; 
   cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Unit_Delay: int ; 
   cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Out: int ; 
   cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Out: bool; 
   cruise_controller_CruiseController_ModeLogic_resumeEvent_InBool: bool; 
   cruise_controller_CruiseController_ModeLogic_resumeEvent_Unit_Delay: bool; 
   cruise_controller_CruiseController_ModeLogic_resumeEvent_Out: bool; 
   cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator: bool; 
   cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator1: bool; 
   cruise_controller_CruiseController_ModeLogic_setEvent_InBool: bool; 
   cruise_controller_CruiseController_ModeLogic_setEvent_Unit_Delay: bool; 
   cruise_controller_CruiseController_ModeLogic_setEvent_Out: bool; 
   cruise_controller_CruiseController_ModeLogic_safetyCondition1: bool; 
   cruise_controller_CruiseController_SP1__Const_Eq: bool; 
   cruise_controller_CruiseController_SP10___Const_Eq: bool; 
   cruise_controller_CruiseController_SP10_pre_INCREASE_pre_INC: bool; 
   cruise_controller_CruiseController_SP10_pre_realval_x: real; 
   cruise_controller_CruiseController_SP10_Logical_Operator: bool; 
   cruise_controller_CruiseController_SP10_Relational_Operator: bool; 
   cruise_controller_CruiseController_SP11___Const_Eq: bool; 
   cruise_controller_CruiseController_SP11___Const1_gte: bool; 
   cruise_controller_CruiseController_SP3__Const2_Eq: bool; 
   cruise_controller_CruiseController_SP3__OFF_INIT__INIT__INIT: bool; 
   cruise_controller_CruiseController_SP3__OFF_INIT__OFF__OFF: bool; 
   cruise_controller_CruiseController_SP3__OFF_INIT__OFF_INIT: bool; 
   cruise_controller_CruiseController_SP3a__Const_Eq: bool; 
   cruise_controller_CruiseController_SP3b__Const2_Eq: bool; 
   cruise_controller_CruiseController_SP4__ACT_INACT__ACTIVE__ACT: bool; 
   cruise_controller_CruiseController_SP4__ACT_INACT__INACTIVE__INACT: bool; 
   cruise_controller_CruiseController_SP4__ACT_INACT__ACT_INACT: bool; 
   cruise_controller_CruiseController_SP5_pre_realval_x: real; 
   cruise_controller_CruiseController_SP5_pre_realval_pre_x_: real; 
   cruise_controller_CruiseController_SP5_Relational_Operator: bool; 
   cruise_controller_CruiseController_SP6_Relational_Operator: bool; 
   cruise_controller_CruiseController_SP7_Relational_Operator: bool; 
   cruise_controller_CruiseController_SP8_pre_MAINTAIN__MAINTAIN____MAINT: bool; 
   cruise_controller_CruiseController_SP8_pre_MAINTAIN_pre_MNT: bool; 
   cruise_controller_CruiseController_SP8_pre_realval_pre_x_: real; 
   cruise_controller_CruiseController_SP8_Relational_Operator: bool; 
   cruise_controller_CruiseController_SP9_pre_DECREASE_pre_DEC: bool; 
   cruise_controller_CruiseController_SP9_Logical_Operator: bool; 
   cruise_controller_CruiseController_SP9_Relational_Operator: bool; 
   cruise_controller_CruiseController_SetDesiredSpeed_isModeDecrease___isModeDecrease: bool; 
   cruise_controller_CruiseController_SetDesiredSpeed_isModeIncrease___isModeIncrease: bool; 
   cruise_controller_CruiseController_SetDesiredSpeed_DecreaseDesiredSpeed: real; 
   cruise_controller_CruiseController_SetDesiredSpeed_InactiveMaintanDesiredSpeed: real; 
   cruise_controller_CruiseController_SetDesiredSpeed_MaintainDesiredSpeed: real; 
   cruise_controller_CruiseController_SetDesiredSpeed_ResetDesiredSpeed: real; 
   cruise_controller_CruiseController_SetDesiredSpeed_prev_desiredSpeed: real; 
   cruise_controller_CruiseController_SetDesiredSpeed_increasedesiredSpeed: real; 
   cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrev: real; 
   cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrevPlusDelta: real; 
   cruise_controller_CruiseController_SetThrottle_cruiseThrottleSat: real; 
   cruise_controller_CruiseController_SetThrottle_speedDiff: real; 
   cruise_controller_CruiseController_SetThrottle_thottleDeltaPerSec: real; 
   cruise_controller_CruiseController_SetThrottle_throttleDeltaPerSecSat: real; 
   cruise_controller_CruiseController_SetThrottle_throttleDeltaPerStep: real; 
   cruise_controller_CruiseController_VRP1___Const__gte: bool; 
   cruise_controller_CruiseController_VRP1___Const_gte: bool; 
   cruise_controller_CruiseController_VRP2___Const__gte: bool; 
   cruise_controller_CruiseController_VRP2___Const_gte: bool; 
   cruise_controller_CruiseController_VRP3__Const_Eq: bool; 
   cruise_controller_CruiseController_VRP3__Const1_Eq: bool; 
   cruise_controller_CruiseController_VRP3_Logical_Operator: bool; 
   cruise_controller_CruiseController_VRP4_Relational_Operator: bool; 
   cruise_controller_CruiseController_VRP4_Relational_Operator1: bool;

let 
   cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Limit_Enforce_lower_limit = 
      (if (0 >= cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Switch)
         then 0
         else cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Switch);

   cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Switch = 
      (if accelResume
         then cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Add
         else 0);

   cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Unit_Delay = (0 -> (pre cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Out));

   cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Limit_Enforce_lower_limit = 
      (if (0 >= cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Switch)
         then 0
         else cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Switch);

   cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Switch = 
      (if decelSet
         then cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Add
         else 0);

   cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Unit_Delay = (0 -> (pre cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Out));

   chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root = (0 -> (pre chart_CruiseController_ModeLogic_mode_logic_final_state_states___root));

   chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_mode = (0 -> (pre mode));

   chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_current_event = 
      (if SP3c
         then 1
         else 0);

   /* Beginning transition segment: trans20
      <fired> is true if the following are true: 
         1. the previous transition guard was true, 
         2. the source node for the transition is active, 
         3. the condition for the transition to fire is true, and 
         4. no higher-priority transition has completed (not <complete>) */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1 = ((rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root = 8) and 
      (((
      (if ((cruise_controller_CruiseController_ModeLogic_setEvent_Out = true) = false)
         then 0
         else 1) <> 0) and 
      (
      (if ((cruise_controller_CruiseController_ModeLogic_safetyCondition1 = true) = false)
         then 0
         else 1) <> 0)) and 
      (not rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0)));

   /* Beginning transition segment: trans19
      <fired> is true if the following are true: 
         1. the previous transition guard was true, 
         2. the source node for the transition is active, 
         3. the condition for the transition to fire is true, and 
         4. no higher-priority transition has completed (not <complete>) */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_2 = ((rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root = 8) and 
      (((
      (if ((cruise_controller_CruiseController_ModeLogic_resumeEvent_Out = true) = false)
         then 0
         else 1) <> 0) and 
      (
      (if ((cruise_controller_CruiseController_ModeLogic_safetyCondition1 = true) = false)
         then 0
         else 1) <> 0)) and 
      (not rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_1)));

   /* Beginning transition segment: trans22
      <fired> is true if the following are true: 
         1. the previous transition guard was true, 
         2. the source node for the transition is active, 
         3. the condition for the transition to fire is true, and 
         4. no higher-priority transition has completed (not <complete>) */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3 = ((rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_states___root = 7) and 
      (((
      (if ((cruise_controller_CruiseController_ModeLogic_setEvent_Out = true) = false)
         then 0
         else 1) <> 0) and 
      (
      (if ((cruise_controller_CruiseController_ModeLogic_safetyCondition1 = true) = false)
         then 0
         else 1) <> 0)) and 
      (not rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_2)));

   /* Beginning transition segment: trans24
      <fired> is true if the following are true: 
         1. the previous transition guard was true, 
         2. the source node for the transition is active, 
         3. the condition for the transition to fire is true, and 
         4. no higher-priority transition has completed (not <complete>) */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0 = ((rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root = 4) and 
      (
      (if ((cruise_controller_CruiseController_ModeLogic_setEvent_Out = true) = false)
         then 0
         else 1) <> 0));

   /* Beginning transition segment: trans14
      <fired> is true if the following are true: 
         1. the previous transition guard was true, 
         2. the source node for the transition is active, 
         3. the condition for the transition to fire is true, and 
         4. no higher-priority transition has completed (not <complete>) */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1 = ((rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root = 4) and 
      ((
      (if ((cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Out = true) = false)
         then 0
         else 1) <> 0) and 
      (not rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0)));

   /* Beginning transition segment: trans15
      <fired> is true if the following are true: 
         1. the previous transition guard was true, 
         2. the source node for the transition is active, 
         3. the condition for the transition to fire is true, and 
         4. no higher-priority transition has completed (not <complete>) */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2 = ((rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root = 4) and 
      ((
      (if ((cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Out = true) = false)
         then 0
         else 1) <> 0) and 
      (not rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_1)));

   /* Beginning transition segment: trans17
      <fired> is true if the following are true: 
         1. the previous transition guard was true, 
         2. the source node for the transition is active, 
         3. the condition for the transition to fire is true, and 
         4. no higher-priority transition has completed (not <complete>) */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_3 = ((rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_states___root = 6) and 
      ((
      (if ((cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Out = false) = false)
         then 0
         else 1) <> 0) and 
      (not rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_2)));

   /* Beginning transition segment: trans16
      <fired> is true if the following are true: 
         1. the previous transition guard was true, 
         2. the source node for the transition is active, 
         3. the condition for the transition to fire is true, and 
         4. no higher-priority transition has completed (not <complete>) */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_4 = ((rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_states___root = 5) and 
      ((
      (if ((cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Out = false) = false)
         then 0
         else 1) <> 0) and 
      (not rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_3)));

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_02 = ((rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root2 = 4) or 
      ((rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root2 = 5) or 
      (rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root2 = 6)));

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 = 
      (if (not 
         /* <In state> path: On.Active maps to field: __root and value range: [3, 6] */
         ((rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root >= 3) and 
         (rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root <= 6)))
         then 
               /* <Enter state> path: On.Active maps to field: __root and value: 3 */
               3
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root);

   /* Beginning transition segment: trans18
      <fired> is true if the following are true: 
         1. the previous transition guard was true, 
         2. the source node for the transition is active, 
         3. the condition for the transition to fire is true, and 
         4. no higher-priority transition has completed (not <complete>) */
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_01 = ((not 
      /* <In state> path: On.Active maps to field: __root and value range: [3, 6] */
      ((rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root >= 3) and 
      (rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root <= 6))) and 

      /* <In state> path: On.Active maps to field: __root and value range: [3, 6] */
      ((rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 >= 3) and 
      (rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 <= 6)));

   /* Beginning transition segment: trans12
      <fired> is true if the following are true: 
         1. the previous transition guard was true, 
         2. the source node for the transition is active, 
         3. the condition for the transition to fire is true, and 
         4. no higher-priority transition has completed (not <complete>) */
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0 = ((not 
      /* <In state> path: On maps to field: __root and value range: [2, 8] */
      ((rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root >= 2) and 
      (rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root <= 8))) and 

      /* <In state> path: On maps to field: __root and value range: [2, 8] */
      ((rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root >= 2) and 
      (rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root <= 8)));

   rlt_exit_CruiseController_ModeLogic_mode_logic_Off_rlt_state_2_states___root = 
      (if (rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root = 1)
         then 
               /* <Exit state> path: Off maps to field: __root and value: 0 */
               0
         else rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root = 
      (if 
         /* <In state> path: On maps to field: __root and value range: [2, 8] */
         ((chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 2) and 
         (chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 8))
         then 
               /* <Exit state> path: On maps to field: __root and value: 0 */
               0
         else rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root);

   SP3c = true;

   cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Out = (cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Out = 20);

   /* Condition actions for transition segment: trans22: NONE
      Transition action(s) for transition: trans22
      <complete> is true if either: 
         1. this transition has completed, or 
         2. a higher-priority transition has already completed 
       */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_3 = (rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3 or 
      rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_2);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root = 
      (if (chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root = 4)
         then 
               /* <Exit state> path: On.Active.Maintain maps to field: __root and value: 3 */
               3
         else chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root);

   cruise_controller_CruiseController_SP5_pre_realval_x = cruiseThrottle;

   cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator3 = (mode = 6);

   SP7 = ((not cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator3) or 
      cruise_controller_CruiseController_SP7_Relational_Operator);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root = 
      (if 
         /* <In state> path: On maps to field: __root and value range: [2, 8] */
         ((chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 2) and 
         (chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 8))
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root
         else rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root);

   /* Exit action(s) for transition: On_Init -> On_Active */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root1
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_states___root);

   cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Add = (cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Unit_Delay + 1);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root4 = 
      (if (rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root = 4)
         then 
               /* <Exit state> path: On.Active.Maintain maps to field: __root and value: 3 */
               3
         else rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root);

   cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator = (carGear = 3);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root2 = 
      (if (rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root1 = 6)
         then 
               /* <Exit state> path: On.Active.Decrease maps to field: __root and value: 3 */
               3
         else rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root1);

   /* Exit action(s) for transition: On_Active_Maintain -> On_Active_Decrease */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_states___root = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root);

   /* Exit action(s) for transition: On -> On_Init: NONE
      Transition action(s) for transition: On -> On_Init: NONE
      Entry action(s) for transition: On -> On_Init */
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_outports_mode = 
      (if rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_outports_mode
         else rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode);
   /* Transition segment: trans12 complete. */

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_outports_mode = 
      (if (not (rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root = 8))
         then 3
         else rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_outports_mode);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed2 = 
      (if (rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root = 4)
         then false
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_outports_setDesiredSpeed);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 = 
      (if 
         /* <In state> path: On.Active maps to field: __root and value range: [3, 6] */
         ((rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 3) and 
         (rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 6))
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root4
         else rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root);

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode2 = 
      (if (not (rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2 = 4))
         then 4
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_outports_mode);

   cruise_controller_CruiseController_SP10_Relational_Operator = (cruise_controller_CruiseController_SP8_pre_realval_pre_x_ > desiredSpeed);

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_states___root = 
      (if (not (rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_states___root = 5))
         then 
               /* <Enter state> path: On.Active.Increase maps to field: __root and value: 5 */
               5
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_states___root);

   chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed = (false -> (pre chart_CruiseController_ModeLogic_mode_logic_setDesiredSpeed));

   SP3a = ((not (not cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1)) or 
      (not cruise_controller_CruiseController_SP3a__Const_Eq));

   /* Exit action(s) for transition: On_Active -> On_Active_Maintain: NONE
      Transition action(s) for transition: On_Active -> On_Active_Maintain: NONE
      Entry action(s) for transition: On_Active -> On_Active_Maintain */
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode1 = 
      (if rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_01
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode1
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_mode);
   /* Transition segment: trans18 complete. */

   /* Condition actions for transition segment: trans17: NONE
      Transition action(s) for transition: trans17
      <complete> is true if either: 
         1. this transition has completed, or 
         2. a higher-priority transition has already completed 
       */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_3 = (rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_3 or 
      rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_2);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root2 = 
      (if (rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root = 8)
         then 
               /* <Exit state> path: On.Inactive maps to field: __root and value: 2 */
               2
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root2 = 
      (if (rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 = 5)
         then 
               /* <Exit state> path: On.Active.Increase maps to field: __root and value: 3 */
               3
         else rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1);

   cruise_controller_CruiseController_SP3__OFF_INIT__OFF_INIT = (cruise_controller_CruiseController_SP3__OFF_INIT__OFF__OFF or 
      cruise_controller_CruiseController_SP3__OFF_INIT__INIT__INIT);

   cruise_controller_CruiseController_SP11___Const_Eq = (desiredSpeed <> 0.0);

   SP1 = ((not (not cruise_controller_CruiseController_ModeLogic_safetyCondition1)) or 
      cruise_controller_CruiseController_SP1__Const_Eq);

   cruise_controller_CruiseController_VRP1___Const__gte = (cruiseThrottle <= 100.0);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root = 
      (if (rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root = 8)
         then 
               /* <Exit state> path: On.Inactive maps to field: __root and value: 2 */
               2
         else rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed1 = 
      (if (rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root = 4)
         then false
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_outports_setDesiredSpeed);

   /* Condition actions for transition segment: trans20: NONE
      Transition action(s) for transition: trans20
      <complete> is true if either: 
         1. this transition has completed, or 
         2. a higher-priority transition has already completed 
       */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_1 = (rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1 or 
      rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0);

   cruiseThrottle = 
      (if cruise_controller_CruiseController_SP4__ACT_INACT__ACTIVE__ACT
         then cruise_controller_CruiseController_SetThrottle_cruiseThrottleSat
         else 0.0);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root1 = 
      (if 
         /* <In state> path: On.Active maps to field: __root and value range: [3, 6] */
         ((rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 3) and 
         (rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 6))
         then 
               /* <Exit state> path: On.Active maps to field: __root and value: 2 */
               2
         else rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1);

   VRP1 = (cruise_controller_CruiseController_VRP1___Const_gte and 
      cruise_controller_CruiseController_VRP1___Const__gte);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root = 
      (if 
         /* <In state> path: On.Active maps to field: __root and value range: [3, 6] */
         ((chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 3) and 
         (chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 6))
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root
         else rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root);

   cruise_controller_CruiseController_VRP3__Const_Eq = (desiredSpeed < 0.0);

   SP9 = ((not cruise_controller_CruiseController_SP9_Logical_Operator) or 
      cruise_controller_CruiseController_SP9_Relational_Operator);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_setDesiredSpeed = 
      (if 
         /* <In state> path: On maps to field: __root and value range: [2, 8] */
         ((chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 2) and 
         (chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 8))
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed
         else chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed);

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_01 = ((rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1 = 4) or 
      ((rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1 = 5) or 
      (rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1 = 6)));

   cruise_controller_CruiseController_SP11___Const1_gte = (desiredSpeed >= 15.0);

   cruise_controller_CruiseController_SP3__OFF_INIT__OFF__OFF = (mode = 1);

   VRP3 = (not cruise_controller_CruiseController_VRP3_Logical_Operator);

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root21 = 
      (if (not (rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_10_states___root = 4))
         then 
               /* <Enter state> path: On.Active.Maintain maps to field: __root and value: 4 */
               4
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_10_states___root);

   /* Exit action(s) for transition: On_Active_Maintain -> On_Active_Increase */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_outports_setDesiredSpeed = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed1
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_outports_setDesiredSpeed);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root = 
      (if 
         /* <In state> path: On maps to field: __root and value range: [2, 8] */
         ((chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 2) and 
         (chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 8))
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root
         else chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root);

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1 = 
      (if (not (rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 = 4))
         then 
               /* <Enter state> path: On.Active.Maintain maps to field: __root and value: 4 */
               4
         else rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1);

   /* Transition action(s) for transition: On_Active_Maintain -> On_Active_Increase: NONE
      Entry action(s) for transition: On_Active_Maintain -> On_Active_Increase */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_states___root
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_states___root);
   /* Transition segment: trans14 complete. */

   /* Exit action(s) for transition: On -> Off */
   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_outports_setDesiredSpeed = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_setDesiredSpeed
         else chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed);

   /* Beginning transition segment: trans13
      <fired> is true if the following are true: 
         1. the previous transition guard was true, 
         2. the source node for the transition is active, 
         3. the condition for the transition to fire is true, and 
         4. no higher-priority transition has completed (not <complete>) */
   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0 = (
      /* <In state> path: On maps to field: __root and value range: [2, 8] */
      ((chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 2) and 
      (chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 8)) and 
      (not onOff));

   cruise_controller_CruiseController_ModeLogic_resumeEvent_InBool = accelResume;

   cruise_controller_CruiseController_VRP2___Const_gte = (desiredSpeed >= 0.0);

   /* Transition action(s) for transition: On_Active_Decrease -> On_Active_Maintain: NONE
      Entry action(s) for transition: On_Active_Decrease -> On_Active_Maintain */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_states___root = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_3
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root11
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_8_states___root);
   /* Transition segment: trans17 complete. */

   rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_states___root = 
      (if (not (rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root = 1))
         then 
               /* <Enter state> path: Off maps to field: __root and value: 1 */
               1
         else rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root);

   cruise_controller_CruiseController_ModeLogic_setEvent_Unit_Delay = (true -> (pre cruise_controller_CruiseController_ModeLogic_setEvent_InBool));

   /* Exit action(s) for transition: On -> On_Init: NONE
      Transition action(s) for transition: On -> On_Init: NONE
      Entry action(s) for transition: On -> On_Init */
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root = 
      (if rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_states___root
         else rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root);
   /* Transition segment: trans12 complete. */

   cruise_controller_CruiseController_SP10_Logical_Operator = (cruise_controller_CruiseController_SP10_pre_INCREASE_pre_INC and 
      cruise_controller_CruiseController_SP10___Const_Eq);

   /* Transition action(s) for transition: On_Active_Maintain -> On_Active_Decrease: NONE
      Entry action(s) for transition: On_Active_Maintain -> On_Active_Decrease */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_outports_mode = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_outports_mode
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_mode);
   /* Transition segment: trans15 complete. */

   /* Transition action(s) for transition: On_Active_Maintain -> On_Active_Increase: NONE
      Entry action(s) for transition: On_Active_Maintain -> On_Active_Increase */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_mode = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_outports_mode
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode);
   /* Transition segment: trans14 complete. */

   cruise_controller_CruiseController_SP7_Relational_Operator = (cruise_controller_CruiseController_SP8_pre_realval_pre_x_ >= desiredSpeed);

   cruise_controller_CruiseController_SP3b__Const2_Eq = (cruise_controller_CruiseController_SetDesiredSpeed_increasedesiredSpeed = 0.0);

   rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode = 
      (if (not (chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root = 1))
         then 1
         else chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_mode);

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_0 = ((rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root = 4) or 
      ((rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root = 5) or 
      (rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root = 6)));

   /* Transition action(s) for transition: On -> Off: NONE
      Entry action(s) for transition: On -> Off */
   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0
         then rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_states___root
         else rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root);
   /* Transition segment: trans13 complete. */

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root = 
      (if (rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root = 7)
         then 
               /* <Exit state> path: On.Init maps to field: __root and value: 2 */
               2
         else rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root);

   VRP4 = ((cruise_controller_CruiseController_VRP4_Relational_Operator or 
      cruise_controller_CruiseController_SP3__Const2_Eq) or 
      cruise_controller_CruiseController_VRP4_Relational_Operator1);

   /* Exit action(s) for transition: On_Active -> On_Active_Maintain: NONE
      Transition action(s) for transition: On_Active -> On_Active_Maintain: NONE
      Entry action(s) for transition: On_Active -> On_Active_Maintain */
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode = 
      (if rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_outports_mode);
   /* Transition segment: trans18 complete. */

   cruise_controller_CruiseController_VRP2___Const__gte = (desiredSpeed <= 100.0);

   cruise_controller_CruiseController_SetDesiredSpeed_increasedesiredSpeed = 
      (if cruise_controller_CruiseController_SetDesiredSpeed_isModeIncrease___isModeIncrease
         then newDesiredSpeed1
         else cruise_controller_CruiseController_SetDesiredSpeed_DecreaseDesiredSpeed);

   cruise_controller_CruiseController_ModeLogic_setEvent_Out = ((not cruise_controller_CruiseController_ModeLogic_setEvent_Unit_Delay) and 
      cruise_controller_CruiseController_ModeLogic_setEvent_InBool);

   cruise_controller_CruiseController_ModeLogic_resumeEvent_Out = ((not cruise_controller_CruiseController_ModeLogic_resumeEvent_Unit_Delay) and 
      cruise_controller_CruiseController_ModeLogic_resumeEvent_InBool);

   cruise_controller_CruiseController_VRP4_Relational_Operator1 = (desiredSpeed = carSpeed);

   /* Transition action(s) for transition: Off -> On: NONE
      Entry action(s) for transition: Off -> On */
   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_outports_mode = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_1
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_outports_mode
         else rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode);
   /* Transition segment: trans23 complete. */

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root = 
      (if (not 
         /* <In state> path: On maps to field: __root and value range: [2, 8] */
         ((rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root >= 2) and 
         (rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root <= 8)))
         then 
               /* <Enter state> path: On maps to field: __root and value: 2 */
               2
         else rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root);

   /* Transition action(s) for transition: On_Active_Maintain -> On_Active_Decrease: NONE
      Entry action(s) for transition: On_Active_Maintain -> On_Active_Decrease */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_states___root = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_states___root
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_states___root);
   /* Transition segment: trans15 complete. */

   /* Exit action(s) for transition: On -> Off */
   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root
         else chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root);

   /* Exit action(s) for transition: On_Active_Maintain -> On_Active_Decrease */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_outports_setDesiredSpeed = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed2
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_outports_setDesiredSpeed);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root1 = 
      (if (rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_states___root = 5)
         then 
               /* <Exit state> path: On.Active.Increase maps to field: __root and value: 3 */
               3
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_states___root);

   rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_outports_mode = 
      (if (not (rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root = 1))
         then 1
         else chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_mode);

   cruise_controller_CruiseController_ModeLogic_resumeEvent_Unit_Delay = (true -> (pre cruise_controller_CruiseController_ModeLogic_resumeEvent_InBool));

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed4 = 
      (if (rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root = 4)
         then false
         else rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_outports_setDesiredSpeed);

   cruise_controller_CruiseController_SP4__ACT_INACT__ACT_INACT = (cruise_controller_CruiseController_SP4__ACT_INACT__ACTIVE__ACT or 
      cruise_controller_CruiseController_SP4__ACT_INACT__INACTIVE__INACT);

   cruise_controller_CruiseController_ModeLogic_safetyCondition1 = (((((not cancel) and 
      (not brakePedal)) and 
      cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator) and 
      cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator1) and 
      validInputs);

   cruise_controller_CruiseController_ModeLogic_setEvent_InBool = decelSet;

   chart_CruiseController_ModeLogic_mode_logic_rlt_evtInitStep = (true -> 
      (if (pre SP3c)
         then false
         else (pre chart_CruiseController_ModeLogic_mode_logic_rlt_evtInitStep)));

   cruise_controller_CruiseController_SP3__OFF_INIT__INIT__INIT = (mode = 2);

   chart_CruiseController_ModeLogic_mode_logic_final_state_states___root = chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root;

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root11 = 
      (if (not (rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_8_states___root = 4))
         then 
               /* <Enter state> path: On.Active.Maintain maps to field: __root and value: 4 */
               4
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_8_states___root);

   /* Transition action(s) for transition: On_Inactive -> On_Active */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_4_outports_setDesiredSpeed = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1
         then true
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_outports_setDesiredSpeed);

   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_setDesiredSpeed = 
      (if ((not rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_4) and 
         (rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_states___root = 4))
         then false
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_outports_setDesiredSpeed);

   rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_clock = cruise_controller_CruiseController_SetDesiredSpeed_isModeIncrease___isModeIncrease;

   newDesiredSpeed1 = (
      (if (rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_init_step and 
         (not rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_clock))
         then 0.0
         else (cruise_controller_CruiseController_SetDesiredSpeed_prev_desiredSpeed + 0.05)) -> 
      (if (rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_init_step and 
         (not rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_clock))
         then 0.0
         else 
      (if rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_clock
         then (cruise_controller_CruiseController_SetDesiredSpeed_prev_desiredSpeed + 0.05)
         else (pre newDesiredSpeed1))));

   rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_init_step = (true -> 
      (if (pre rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_clock)
         then false
         else (pre rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeIncreaseInDesiredSpeed_rlt_init_step)));

   /* Transition action(s) for transition: On_Active_Increase -> On_Active_Maintain: NONE
      Entry action(s) for transition: On_Active_Increase -> On_Active_Maintain */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_mode = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_4
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode21
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_outports_mode);
   /* Transition segment: trans16 complete. */

   chart_CruiseController_ModeLogic_mode_logic_setDesiredSpeed = 
      (if SP3c
         then 
               (if chart_CruiseController_ModeLogic_mode_logic_rlt_evtInitStep
                  then chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed
                  else rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_setDesiredSpeed)
         else chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed);

   /* Condition actions for transition segment: trans19: NONE
      Transition action(s) for transition: trans19
      <complete> is true if either: 
         1. this transition has completed, or 
         2. a higher-priority transition has already completed 
       */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_2 = (rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_2 or 
      rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_1);

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2 = 
      (if (not (rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2 = 4))
         then 
               /* <Enter state> path: On.Active.Maintain maps to field: __root and value: 4 */
               4
         else rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2);

   cruise_controller_CruiseController_SP10___Const_Eq = (desiredSpeed <> 100.0);

   SP10 = ((not cruise_controller_CruiseController_SP10_Logical_Operator) or 
      cruise_controller_CruiseController_SP10_Relational_Operator);

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_outports_mode = 
      (if (not (rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_states___root = 6))
         then 5
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_mode);

   cruise_controller_CruiseController_SP4__ACT_INACT__ACTIVE__ACT = ((cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1 or 
      cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator2) or 
      cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator3);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2 = 
      (if (rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root = 4)
         then 
               /* <Exit state> path: On.Active.Maintain maps to field: __root and value: 3 */
               3
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root = 
      (if (rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root = 5)
         then 
               /* <Exit state> path: On.Active.Increase maps to field: __root and value: 3 */
               3
         else rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root);

   /* Exit action(s) for outer loop transition: On_Active_Maintain */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_outports_setDesiredSpeed = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed3
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_9_outports_setDesiredSpeed);

   /* Exit action(s) for transition: Off -> On */
   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_1
         then rlt_exit_CruiseController_ModeLogic_mode_logic_Off_rlt_state_2_states___root
         else rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root);

   cruise_controller_CruiseController_SP3a__Const_Eq = (
      (if (chart_CruiseController_ModeLogic_mode_logic_setDesiredSpeed = false)
         then 0.0
         else 1.0) = 1.0);

   cruise_controller_CruiseController_SetThrottle_speedDiff = (desiredSpeed - carSpeed);

   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_mode = 
      (if ((not rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_complete_1) and 

         /* <In state> path: On maps to field: __root and value range: [2, 8] */
         ((rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 2) and 
         (rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 8)))
         then rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_mode
         else rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_outports_mode);

   cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Out = (cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Out = 20);

   /* Transition action(s) for outer loop transition: On_Active_Maintain */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_outports_setDesiredSpeed = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0
         then true
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_outports_setDesiredSpeed);

   /* Entry action(s) for transition: On_Inactive -> On_Active */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root);
   /* Transition segment: trans20 complete. */

   cruise_controller_CruiseController_SP3__Const2_Eq = (desiredSpeed = 0.0);

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root = 
      (if (not 
         /* <In state> path: On.Active maps to field: __root and value range: [3, 6] */
         ((rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root >= 3) and 
         (rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root <= 6)))
         then 
               /* <Enter state> path: On.Active maps to field: __root and value: 3 */
               3
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root);

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode1 = 
      (if (not (rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1 = 4))
         then 4
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_mode);

   cruise_controller_CruiseController_SetThrottle_throttleDeltaPerSecSat = 
      (if (cruise_controller_CruiseController_SetThrottle_thottleDeltaPerSec < ( -10.0))
         then ( -10.0)
         else 
      (if (cruise_controller_CruiseController_SetThrottle_thottleDeltaPerSec > 10.0)
         then 10.0
         else cruise_controller_CruiseController_SetThrottle_thottleDeltaPerSec));

   /* Transition action(s) for transition: On_Inactive -> On_Active: NONE
      Entry action(s) for transition: On_Inactive -> On_Active */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_outports_mode = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_2
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode1
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_mode);
   /* Transition segment: trans19 complete. */

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2 = 
      (if (not 
         /* <In state> path: On.Active maps to field: __root and value range: [3, 6] */
         ((rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root >= 3) and 
         (rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root <= 6)))
         then 
               /* <Enter state> path: On.Active maps to field: __root and value: 3 */
               3
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root);

   /* Beginning transition segment: trans18
      <fired> is true if the following are true: 
         1. the previous transition guard was true, 
         2. the source node for the transition is active, 
         3. the condition for the transition to fire is true, and 
         4. no higher-priority transition has completed (not <complete>) */
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_02 = ((not 
      /* <In state> path: On.Active maps to field: __root and value range: [3, 6] */
      ((rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root >= 3) and 
      (rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root <= 6))) and 

      /* <In state> path: On.Active maps to field: __root and value range: [3, 6] */
      ((rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2 >= 3) and 
      (rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2 <= 6)));

   /* Beginning transition segment: trans18
      <fired> is true if the following are true: 
         1. the previous transition guard was true, 
         2. the source node for the transition is active, 
         3. the condition for the transition to fire is true, and 
         4. no higher-priority transition has completed (not <complete>) */
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0 = ((not 
      /* <In state> path: On.Active maps to field: __root and value range: [3, 6] */
      ((rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root >= 3) and 
      (rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root <= 6))) and 

      /* <In state> path: On.Active maps to field: __root and value range: [3, 6] */
      ((rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root >= 3) and 
      (rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root <= 6)));

   /* Transition action(s) for transition: On_Active -> On_Inactive: NONE
      Entry action(s) for transition: On_Active -> On_Inactive */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_states___root
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root);
   /* Transition segment: trans21 complete. */

   cruise_controller_CruiseController_SP4__ACT_INACT__INACTIVE__INACT = (mode = 3);

   cruise_controller_CruiseController_SetDesiredSpeed_ResetDesiredSpeed = 
      (if chart_CruiseController_ModeLogic_mode_logic_setDesiredSpeed
         then carSpeed
         else cruise_controller_CruiseController_SetDesiredSpeed_increasedesiredSpeed);

   SP2 = ((not (not cruise_controller_CruiseController_SP4__ACT_INACT__ACTIVE__ACT)) or 
      cruise_controller_CruiseController_SP1__Const_Eq);

   /* Entry action(s) for transition: On_Init -> On_Active */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root2
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_8_states___root);
   /* Transition segment: trans22 complete. */

   cruise_controller_CruiseController_VRP4_Relational_Operator = (desiredSpeed = cruise_controller_CruiseController_SP8_pre_realval_pre_x_);

   cruise_controller_CruiseController_SP8_Relational_Operator = (cruise_controller_CruiseController_SP8_pre_realval_pre_x_ = desiredSpeed);

   /* Beginning transition segment: trans21
      <fired> is true if the following are true: 
         1. the previous transition guard was true, 
         2. the source node for the transition is active, 
         3. the condition for the transition to fire is true, and 
         4. no higher-priority transition has completed (not <complete>) */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0 = (
      /* <In state> path: On.Active maps to field: __root and value range: [3, 6] */
      ((rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 3) and 
      (rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 6)) and 
      (not cruise_controller_CruiseController_ModeLogic_safetyCondition1));

   /* Condition actions for transition segment: trans16: NONE
      Transition action(s) for transition: trans16
      <complete> is true if either: 
         1. this transition has completed, or 
         2. a higher-priority transition has already completed 
       */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_4 = (rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_4 or 
      rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_3);

   SP4 = ((not cruise_controller_CruiseController_SP4__ACT_INACT__ACT_INACT) or 
      cruise_controller_CruiseController_SP11___Const1_gte);

   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_states___root = 
      (if ((not rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_complete_1) and 

         /* <In state> path: On maps to field: __root and value range: [2, 8] */
         ((rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 2) and 
         (rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 8)))
         then rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_states___root
         else rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root = 
      (if 
         /* <In state> path: On.Active maps to field: __root and value range: [3, 6] */
         ((chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 3) and 
         (chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 6))
         then 
               /* <Exit state> path: On.Active maps to field: __root and value: 2 */
               2
         else rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root);

   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_setDesiredSpeed = 
      (if ((not rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_3) and 

         /* <In state> path: On.Active maps to field: __root and value range: [3, 6] */
         ((rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root >= 3) and 
         (rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root <= 6)))
         then rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_setDesiredSpeed
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_9_outports_setDesiredSpeed);

   /* Exit action(s) for transition: On_Active_Decrease -> On_Active_Maintain */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_8_states___root = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_3
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root1
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_states___root);

   cruise_controller_CruiseController_SP9_Relational_Operator = (cruise_controller_CruiseController_SP8_pre_realval_pre_x_ < desiredSpeed);

   cruise_controller_CruiseController_VRP3__Const1_Eq = (desiredSpeed > 0.0);

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_states___root = 
      (if (not (rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root = 7))
         then 
               /* <Enter state> path: On.Init maps to field: __root and value: 7 */
               7
         else rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root);

   /* Transition action(s) for transition: On_Active_Increase -> On_Active_Maintain: NONE
      Entry action(s) for transition: On_Active_Increase -> On_Active_Maintain */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_states___root = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_4
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root21
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_10_states___root);
   /* Transition segment: trans16 complete. */

   /* Exit action(s) for transition: On_Inactive -> On_Active */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root2
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root);

   rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_clock = cruise_controller_CruiseController_SetDesiredSpeed_isModeDecrease___isModeDecrease;

   newDesiredSpeed = (
      (if (rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_init_step and 
         (not rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_clock))
         then 0.0
         else (cruise_controller_CruiseController_SetDesiredSpeed_prev_desiredSpeed - 0.05)) -> 
      (if (rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_init_step and 
         (not rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_clock))
         then 0.0
         else 
      (if rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_clock
         then (cruise_controller_CruiseController_SetDesiredSpeed_prev_desiredSpeed - 0.05)
         else (pre newDesiredSpeed))));

   rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_init_step = (true -> 
      (if (pre rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_clock)
         then false
         else (pre rlt_condact_cruise_controller_CruiseController_SetDesiredSpeed_computeDecreaseInDesiredSpeed_rlt_init_step)));

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root1 = 
      (if (rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_states___root = 7)
         then 
               /* <Exit state> path: On.Init maps to field: __root and value: 2 */
               2
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_states___root);

   /* Entry action(s) for transition: On_Init -> On_Active */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_outports_mode = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode2
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_outports_mode);
   /* Transition segment: trans22 complete. */

   cruise_controller_CruiseController_SP5_pre_realval_pre_x_ = (0.0 -> (pre cruise_controller_CruiseController_SP5_pre_realval_x));

   cruise_controller_CruiseController_SP8_pre_MAINTAIN__MAINTAIN____MAINT = cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1;

   cruise_controller_CruiseController_SetDesiredSpeed_isModeDecrease___isModeDecrease = cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator2;

   cruise_controller_CruiseController_SetDesiredSpeed_isModeIncrease___isModeIncrease = cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator3;

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_rltCheckEntryStateConsistency_0 = (
      /* <In state> path: On.Active maps to field: __root and value range: [3, 6] */
      ((rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root >= 3) and 
      (rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root <= 6)) or 
      ((rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root = 7) or 
      (rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root = 8)));

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode = 
      (if (not (rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root = 4))
         then 4
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_outports_mode);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3 = 
      (if (rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root = 4)
         then 
               /* <Exit state> path: On.Active.Maintain maps to field: __root and value: 3 */
               3
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root);

   chart_CruiseController_ModeLogic_mode_logic_rlt_state_1_states___root = 
      (if SP3c
         then 
               (if chart_CruiseController_ModeLogic_mode_logic_rlt_evtInitStep
                  then rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root
                  else rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_states___root)
         else chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root);

   VRP2 = (cruise_controller_CruiseController_VRP2___Const_gte and 
      cruise_controller_CruiseController_VRP2___Const__gte);

   rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root = 
      (if (not (chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root = 1))
         then 
               /* <Enter state> path: Off maps to field: __root and value: 1 */
               1
         else chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root);

   /* Exit action(s) for transition: On_Active -> On_Active_Maintain: NONE
      Transition action(s) for transition: On_Active -> On_Active_Maintain: NONE
      Entry action(s) for transition: On_Active -> On_Active_Maintain */
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root2 = 
      (if rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_02
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root2
         else rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root2);
   /* Transition segment: trans18 complete. */

   /* Beginning transition segment: trans23
      <fired> is true if the following are true: 
         1. the previous transition guard was true, 
         2. the source node for the transition is active, 
         3. the condition for the transition to fire is true, and 
         4. no higher-priority transition has completed (not <complete>) */
   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_1 = ((rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root = 1) and 
      (onOff and 
      (not rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0)));

   /* Condition actions for transition segment: trans15: NONE
      Transition action(s) for transition: trans15
      <complete> is true if either: 
         1. this transition has completed, or 
         2. a higher-priority transition has already completed 
       */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_2 = (rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_2 or 
      rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_1);

   cruise_controller_CruiseController_SetDesiredSpeed_prev_desiredSpeed = (0.0 -> (pre desiredSpeed));

   cruise_controller_CruiseController_SetThrottle_thottleDeltaPerSec = (cruise_controller_CruiseController_SetThrottle_speedDiff * 1.0);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root1 = 
      (if (rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root = 8)
         then 
               /* <Exit state> path: On.Inactive maps to field: __root and value: 2 */
               2
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root = 
      (if (rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root = 6)
         then 
               /* <Exit state> path: On.Active.Decrease maps to field: __root and value: 3 */
               3
         else rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root);

   cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Out = 
      (if (cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Limit_Enforce_lower_limit <= 20)
         then cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Limit_Enforce_lower_limit
         else 20);

   cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Add = (cruise_controller_CruiseController_ModeLogic_DelayOnsetAccel_Bounded_Count_Unit_Delay + 1);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root1 = 
      (if (rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_states___root = 6)
         then 
               /* <Exit state> path: On.Active.Decrease maps to field: __root and value: 3 */
               3
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_states___root);

   cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1 = (mode = 4);

   cruise_controller_CruiseController_SP1__Const_Eq = (cruiseThrottle = 0.0);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root = 
      (if 
         /* <In state> path: On.Active maps to field: __root and value range: [3, 6] */
         ((chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 3) and 
         (chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 6))
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root
         else chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root);

   /* Exit action(s) for transition: On_Active -> On_Inactive */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_outports_setDesiredSpeed = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed1
         else rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_outports_setDesiredSpeed);

   /* Transition action(s) for transition: On_Active_Decrease -> On_Active_Maintain: NONE
      Entry action(s) for transition: On_Active_Decrease -> On_Active_Maintain */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_outports_mode = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_3
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode11
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_outports_mode);
   /* Transition segment: trans17 complete. */

   /* Entry action(s) for transition: On_Inactive -> On_Active */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_outports_mode = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_1
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_outports_mode);
   /* Transition segment: trans20 complete. */

   /* Exit action(s) for transition: On_Active_Maintain -> On_Active_Increase */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_states___root = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root);

   cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrevPlusDelta = (cruise_controller_CruiseController_SetThrottle_throttleDeltaPerStep + cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrev);

   cruise_controller_CruiseController_SP10_pre_realval_x = desiredSpeed;

   cruise_controller_CruiseController_SP6_Relational_Operator = (cruise_controller_CruiseController_SP8_pre_realval_pre_x_ <= desiredSpeed);

   /* Exit action(s) for outer loop transition: On_Active_Maintain */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root);

   mode = 
      (if SP3c
         then 
               (if chart_CruiseController_ModeLogic_mode_logic_rlt_evtInitStep
                  then rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode
                  else rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_mode)
         else chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_mode);

   SP5 = ((not cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1) or 
      cruise_controller_CruiseController_SP5_Relational_Operator);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_states___root = 
      (if 
         /* <In state> path: On maps to field: __root and value range: [2, 8] */
         ((chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 2) and 
         (chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 8))
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_2_states___root
         else rlt_exit_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root);

   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_mode = 
      (if ((not rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_3) and 

         /* <In state> path: On.Active maps to field: __root and value range: [3, 6] */
         ((rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root >= 3) and 
         (rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root <= 6)))
         then rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_outports_mode
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_outports_mode);

   SP3b = ((not cruise_controller_CruiseController_SP3__OFF_INIT__OFF_INIT) or 
      cruise_controller_CruiseController_SP3b__Const2_Eq);

   /* Transition action(s) for transition: On -> Off: NONE
      Entry action(s) for transition: On -> Off */
   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0
         then rlt_enter_CruiseController_ModeLogic_mode_logic_Off_rlt_state_3_outports_mode
         else chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_mode);
   /* Transition segment: trans13 complete. */

   cruise_controller_CruiseController_SetDesiredSpeed_InactiveMaintanDesiredSpeed = 
      (if cruise_controller_CruiseController_SP4__ACT_INACT__INACTIVE__INACT
         then cruise_controller_CruiseController_SetDesiredSpeed_prev_desiredSpeed
         else 0.0);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed3 = 
      (if (rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root = 4)
         then false
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_9_outports_setDesiredSpeed);

   /* Condition actions for transition segment: trans23: NONE
      Transition action(s) for transition: trans23
      <complete> is true if either: 
         1. this transition has completed, or 
         2. a higher-priority transition has already completed 
       */
   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_complete_1 = (rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_1 or 
      rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_0);

   /* Exit action(s) for transition: On_Active -> On_Active_Maintain: NONE
      Transition action(s) for transition: On_Active -> On_Active_Maintain: NONE
      Entry action(s) for transition: On_Active -> On_Active_Maintain */
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1 = 
      (if rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_01
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1
         else rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1);
   /* Transition segment: trans18 complete. */

   SP3 = ((not cruise_controller_CruiseController_SP3__OFF_INIT__OFF_INIT) or 
      cruise_controller_CruiseController_SP3__Const2_Eq);

   cruise_controller_CruiseController_VRP1___Const_gte = (cruiseThrottle >= 0.0);

   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_states___root = 
      (if ((not rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_complete_3) and 

         /* <In state> path: On.Active maps to field: __root and value range: [3, 6] */
         ((rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root >= 3) and 
         (rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root <= 6)))
         then rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_15_states___root
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_states___root);

   rlt_enter_CruiseController_ModeLogic_mode_logic_rltCheckEntryStateConsistency_0 = ((rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root = 1) or 

      /* <In state> path: On maps to field: __root and value range: [2, 8] */
      ((rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root >= 2) and 
      (rlt_enter_CruiseController_ModeLogic_mode_logic_rlt_state_2_states___root <= 8)));

   /* Transition action(s) for transition: On_Init -> On_Active */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_9_outports_setDesiredSpeed = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_3
         then true
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_4_outports_setDesiredSpeed);

   /* Exit action(s) for transition: On_Active -> On_Inactive */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_states___root1
         else rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root);

   SP11 = ((not cruise_controller_CruiseController_SP11___Const_Eq) or 
      cruise_controller_CruiseController_SP11___Const1_gte);

   cruise_controller_CruiseController_SetDesiredSpeed_MaintainDesiredSpeed = 
      (if cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator1
         then cruise_controller_CruiseController_SetDesiredSpeed_prev_desiredSpeed
         else cruise_controller_CruiseController_SetDesiredSpeed_InactiveMaintanDesiredSpeed);

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode3 = 
      (if (not (rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root = 4))
         then 4
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_outports_mode);

   cruise_controller_CruiseController_SP9_pre_DECREASE_pre_DEC = (false -> (pre cruise_controller_CruiseController_SetDesiredSpeed_isModeDecrease___isModeDecrease));

   /* Transition action(s) for transition: On_Inactive -> On_Active: NONE
      Entry action(s) for transition: On_Inactive -> On_Active */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_states___root = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_2
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root);
   /* Transition segment: trans19 complete. */

   cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Out = 
      (if (cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Limit_Enforce_lower_limit <= 20)
         then cruise_controller_CruiseController_ModeLogic_DelayOnsetDecel_Bounded_Count_Limit_Enforce_lower_limit
         else 20);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root = 
      (if 
         /* <In state> path: On.Active maps to field: __root and value range: [3, 6] */
         ((chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 3) and 
         (chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 6))
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root
         else rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root);

   cruise_controller_CruiseController_VRP3_Logical_Operator = (cruise_controller_CruiseController_VRP3__Const1_Eq and 
      cruise_controller_CruiseController_VRP3__Const_Eq);

   /* Exit action(s) for transition: On_Inactive -> On_Active */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_6_states___root = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_2
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_2_states___root1
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_5_states___root);

   cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator2 = (mode = 5);

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_3_outports_mode = 
      (if (not (rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_4_states___root = 5))
         then 6
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode);

   /* Exit action(s) for transition: On_Active -> On_Active_Maintain: NONE
      Transition action(s) for transition: On_Active -> On_Active_Maintain: NONE
      Entry action(s) for transition: On_Active -> On_Active_Maintain */
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root = 
      (if rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root
         else rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root);
   /* Transition segment: trans18 complete. */

   cruise_controller_CruiseController_SetThrottle_throttleDeltaPerStep = (cruise_controller_CruiseController_SetThrottle_throttleDeltaPerSecSat / 20.0);

   CP8a = ((not chart_CruiseController_ModeLogic_mode_logic_setDesiredSpeed) or 
      cruise_controller_CruiseController_SP4__ACT_INACT__ACTIVE__ACT);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed = 
      (if 
         /* <In state> path: On.Active maps to field: __root and value range: [3, 6] */
         ((chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root >= 3) and 
         (chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root <= 6))
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed
         else chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed);

   SP6 = ((not cruise_controller_CruiseController_CP8a_isCruiseActive_Relational_Operator2) or 
      cruise_controller_CruiseController_SP6_Relational_Operator);

   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_7_outports_setDesiredSpeed = 
      (if ((not rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_complete_1) and 

         /* <In state> path: On maps to field: __root and value range: [2, 8] */
         ((rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 2) and 
         (rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 8)))
         then rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_14_outports_setDesiredSpeed
         else rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_outports_setDesiredSpeed);

   cruise_controller_CruiseController_SP10_pre_INCREASE_pre_INC = (false -> (pre cruise_controller_CruiseController_SetDesiredSpeed_isModeIncrease___isModeIncrease));

   cruise_controller_CruiseController_SP9_Logical_Operator = (cruise_controller_CruiseController_SP9_pre_DECREASE_pre_DEC and 
      cruise_controller_CruiseController_SP11___Const_Eq);

   /* Entry action(s) for outer loop transition: On_Active_Maintain */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root);
   /* Transition segment: trans24 complete. */

   cruise_controller_CruiseController_SP5_Relational_Operator = (cruise_controller_CruiseController_SP5_pre_realval_pre_x_ = cruiseThrottle);

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_3_states___root = 
      (if (not (rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_states___root = 6))
         then 
               /* <Enter state> path: On.Active.Decrease maps to field: __root and value: 6 */
               6
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_6_states___root);

   cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrev = (0.0 -> (pre cruiseThrottle));

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_5_outports_setDesiredSpeed1 = 
      (if 
         /* <In state> path: On.Active maps to field: __root and value range: [3, 6] */
         ((rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 3) and 
         (rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 6))
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed4
         else rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_1_outports_setDesiredSpeed);

   /* Exit action(s) for transition: On_Active -> On_Active_Maintain: NONE
      Transition action(s) for transition: On_Active -> On_Active_Maintain: NONE
      Entry action(s) for transition: On_Active -> On_Active_Maintain */
   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode2 = 
      (if rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_02
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode2
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_7_outports_mode);
   /* Transition segment: trans18 complete. */

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_setDesiredSpeed = 
      (if (chart_CruiseController_ModeLogic_mode_logic_begin_state_states___root = 4)
         then false
         else chart_CruiseController_ModeLogic_mode_logic_begin_state_outports_setDesiredSpeed);

   /* Transition action(s) for transition: Off -> On: NONE
      Entry action(s) for transition: Off -> On */
   rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_fired_1
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_3_states___root
         else rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_3_states___root);
   /* Transition segment: trans23 complete. */

   SP8 = ((not cruise_controller_CruiseController_SP8_pre_MAINTAIN_pre_MNT) or 
      cruise_controller_CruiseController_SP8_Relational_Operator);

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode21 = 
      (if (not (rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_10_states___root = 4))
         then 4
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_outports_mode);

   desiredSpeed = 
      (if (cruise_controller_CruiseController_SetDesiredSpeed_ResetDesiredSpeed < 0.0)
         then 0.0
         else 
      (if (cruise_controller_CruiseController_SetDesiredSpeed_ResetDesiredSpeed > 100.0)
         then 100.0
         else cruise_controller_CruiseController_SetDesiredSpeed_ResetDesiredSpeed));

   /* Entry action(s) for outer loop transition: On_Active_Maintain */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_outports_mode = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode3
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_10_outports_mode);
   /* Transition segment: trans24 complete. */

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root1 = 
      (if (rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root = 4)
         then 
               /* <Exit state> path: On.Active.Maintain maps to field: __root and value: 3 */
               3
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root);

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Init_rlt_state_3_outports_mode = 
      (if (not (rlt_enter_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root = 7))
         then 2
         else rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_2_outports_mode);

   cruise_controller_CruiseController_SP8_pre_realval_pre_x_ = (0.0 -> (pre cruise_controller_CruiseController_SP10_pre_realval_x));

   cruise_controller_CruiseController_SetThrottle_cruiseThrottleSat = 
      (if (cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrevPlusDelta < 0.0)
         then 0.0
         else 
      (if (cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrevPlusDelta > 100.0)
         then 100.0
         else cruise_controller_CruiseController_SetThrottle_cruiseThrottlePrevPlusDelta));

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root = 
      (if (not (rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root = 4))
         then 
               /* <Enter state> path: On.Active.Maintain maps to field: __root and value: 4 */
               4
         else rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root);

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_states___root3 = 
      (if (not (rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root = 4))
         then 
               /* <Enter state> path: On.Active.Maintain maps to field: __root and value: 4 */
               4
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root);

   /* Condition actions for transition segment: trans14: NONE
      Transition action(s) for transition: trans14
      <complete> is true if either: 
         1. this transition has completed, or 
         2. a higher-priority transition has already completed 
       */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_complete_1 = (rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_1 or 
      rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_0);

   cruise_controller_CruiseController_SetDesiredSpeed_DecreaseDesiredSpeed = 
      (if cruise_controller_CruiseController_SetDesiredSpeed_isModeDecrease___isModeDecrease
         then newDesiredSpeed
         else cruise_controller_CruiseController_SetDesiredSpeed_MaintainDesiredSpeed);

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_Maintain_rlt_state_3_outports_mode11 = 
      (if (not (rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_8_states___root = 4))
         then 4
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_7_outports_mode);

   rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_states___root = 
      (if (not (rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root = 8))
         then 
               /* <Enter state> path: On.Inactive maps to field: __root and value: 8 */
               8
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_1_states___root);

   /* Transition action(s) for transition: On_Active -> On_Inactive: NONE
      Entry action(s) for transition: On_Active -> On_Inactive */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_state_2_outports_mode = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_rlt_fired_0
         then rlt_enter_CruiseController_ModeLogic_mode_logic_On_Inactive_rlt_state_3_outports_mode
         else rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_outports_mode);
   /* Transition segment: trans21 complete. */

   cruise_controller_CruiseController_ModeLogic_safetyCondition_Relational_Operator1 = (carSpeed >= 15.0);

   cruise_controller_CruiseController_SP8_pre_MAINTAIN_pre_MNT = (false -> (pre cruise_controller_CruiseController_SP8_pre_MAINTAIN__MAINTAIN____MAINT));

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_3_states___root1 = 
      (if 
         /* <In state> path: On.Active maps to field: __root and value range: [3, 6] */
         ((rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 3) and 
         (rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 6))
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Decrease_rlt_state_2_states___root2
         else rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root1);

   rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_2_states___root1 = 
      (if 
         /* <In state> path: On.Active maps to field: __root and value range: [3, 6] */
         ((rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root >= 3) and 
         (rlt_eval_CruiseController_ModeLogic_mode_logic_rlt_state_4_states___root <= 6))
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root2
         else rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_1_states___root1);

   /* Exit action(s) for transition: On_Active_Increase -> On_Active_Maintain */
   rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_10_states___root = 
      (if rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_fired_4
         then rlt_exit_CruiseController_ModeLogic_mode_logic_On_Active_Increase_rlt_state_2_states___root1
         else rlt_eval_CruiseController_ModeLogic_mode_logic_On_Active_rlt_state_9_states___root);

  --%PROPERTY rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_02;
  --%PROPERTY rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_01;
  --%PROPERTY rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_0;
  --%PROPERTY rlt_enter_CruiseController_ModeLogic_mode_logic_On_rltCheckEntryStateConsistency_0;
  --%PROPERTY rlt_enter_CruiseController_ModeLogic_mode_logic_rltCheckEntryStateConsistency_0;
  --%PROPERTY       VRP1;
  --%PROPERTY       VRP2;
  -- %PROPERTY       CP8a; -- hard
  --%PROPERTY       VRP3;
  --%PROPERTY       VRP4;
  -- %PROPERTY       SP4; -- hard
--   --%PROPERTY       SP5;
--   --%PROPERTY       SP6;
--   --%PROPERTY       SP7;
--   --%PROPERTY       SP3b;
--   --%PROPERTY       SP3c;
--   --%PROPERTY       SP3;
--   --%PROPERTY       SP3a;
--   --%PROPERTY       SP2;
--   --%PROPERTY       SP1;
--   --%PROPERTY       SP8;
--   --%PROPERTY       SP9;
--   --%PROPERTY       SP10;
--   --%PROPERTY       SP11;

--   check rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_02; 

--   check rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_01; 

--   check rlt_enter_CruiseController_ModeLogic_mode_logic_On_Active_rltCheckEntryStateConsistency_0; 

--   check rlt_enter_CruiseController_ModeLogic_mode_logic_On_rltCheckEntryStateConsistency_0; 

--   check rlt_enter_CruiseController_ModeLogic_mode_logic_rltCheckEntryStateConsistency_0;

tel;


