
node dekker (const n: int;) returns (want, crit: bool^n; turn: int; ok: bool);
var
  -- want, crit: bool^n;
  -- turn: int;
  pwant, pcrit: bool^n;
let
pwant[i] = false -> pre want[i];
pcrit[i] = false -> pre crit[i];

-- assert (n<5);

assert (
  
  (exists (i: int) (0 <= i and i < n and not (pwant[i]) and
    turn = pre turn and
    (forall (j: int)
      ((0 <= j and j < n) =>
      want[j] = (if j=i then true else pwant[j])
      and
      crit[j] = pcrit[j]))
   ))

  or

  (exists (i: int) (0 <= i and i < n and 
    (pwant[i]) and not (pcrit[i]) and turn = i and
    turn = pre turn and
    (forall (j: int)
      ((0 <= j and j < n) =>
      crit[j] = (if j=i then true else pcrit[j])
      and
      want[j] = pwant[j]))
   ))

  or

  (exists (i: int) (0 <= i and i < n and 
    (pcrit[i]) and
    (forall (j: int)
      ((0 <= j and j < n) =>
      crit[j] = (if j=i then false else pcrit[j])
      and
      want[j] = (if j=i then false else pwant[j])))
   ))

);

  ok = false;

  --%PROPERTY "EXCL" forall (i, j: int) 0 <= i and i < n and 0 <= j and j < n and i <> j and crit[i] => not crit[j];

  --%PROPERTY "INV1" not (exists (z1, z2:int) 0 <= z1 and z1 < n and 0 <= z2 and z2 < n and z1 <> z2 and turn = z2 and want[z2] = true and crit[z1] = true and crit[z2] = false);

  --%PROPERTY "INV2" not (exists (z1, z2:int) 0 <= z1 and z1 < n and 0 <= z2 and z2 < n and z1 <> z2 and turn = z2 and want[z2] = false and crit[z1] = true and crit[z2] = false);

tel